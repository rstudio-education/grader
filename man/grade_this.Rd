% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grade_this.R
\name{grade_this}
\alias{grade_this}
\title{Grade a student's submission using custom logic}
\usage{
grade_this(
  expr,
  ...,
  maybe_code_feedback = getOption("gradethis.maybe_code_feedback", TRUE)
)
}
\arguments{
\item{expr}{Expression to be evaluated. MUST either signal a grade via
\code{\link[=pass]{pass()}} or \code{\link[=fail]{fail()}} like \pkg{gradethis} functions or throw an error (via
\pkg{testthat} or \code{\link[=stop]{stop()}}). Errors will be converted to \code{\link[=fail]{fail()}} calls
with the corresponding error message.}

\item{...}{ignored}

\item{maybe_code_feedback}{Logical that determines if \code{maybe_code_feedback()}
should provide code feedback when used in a \code{\link[=graded]{graded()}} message. The default
value can be set with \code{\link[=gradethis_setup]{gradethis_setup()}}.

Typically, \code{\link[=maybe_code_feedback]{maybe_code_feedback()}} is called in the default \code{\link[=fail]{fail()}}
message (the default can be customized the \code{fail} argument of
\code{\link[=gradethis_setup]{gradethis_setup()}}). If the \code{maybe_code_feedback} argument is \code{FALSE},
\code{maybe_code_feedback()} returns an empty string.}
}
\value{
a function whose first parameter should be an environment that
contains all necessary information to execute the expression.  The
evaluation of the expression should return a \code{\link[=graded]{graded()}} object.
}
\description{
Grade a student's submission using custom logic
}
\section{Available variables}{


\code{grade_this()} allows instructors to create an expression to grade. Within
the expression, all \code{learnr} tutorial variables variables are available for
inspection with a \code{.} prepended to the name:
\itemize{
\item \code{.label}: Label for exercise chunk
\item \code{.solution_code}: Code provided within the "-solution" chunk for the exercise
\item \code{.user_code}: R code submitted by the user
\item \code{.check_code}: Code provided within the "-check" (or "-code-check") chunk for the exercise.
\item \code{.envir_prep}: A copy of the R environment before the execution of the chunk.
\item \code{.envir_result}: The R environment after the execution of the chunk.
\item \code{.evaluate_result}: The return value from the \code{evaluate::evaluate} function.
\item \code{.last_value} The last value from evaluating the user's exercise submission.
}

In addition, \pkg{gradethis} has provided some extra variables:
\itemize{
\item \code{.user}, \code{.result}: A direct copy of \code{.last_value} for friendlier naming
\item \code{.solution}: When accessed, will be the result of evaluating the
\code{.solution_code} in a child environment of \code{.envir_prep}
}

As the instructor, you are free to use any logic to determine a student's
grade as long as a \code{\link[=graded]{graded()}} object is signaled. The check code can also
contain \pkg{testthat} expectation code. Failed \pkg{testthat} expectations
will be turned into \code{\link[=fail]{fail()}}ed grades with the corresponding message.
}

\examples{

# These are manual examples, see grading demo for `learnr` tutorial usage

grade_this({
  fail_if_equal(4, "Try adding 1")
  pass_if_equal(5, "You got 5, great!")
  fail()
})(list(
  .result = 4
))

grade_this({
  testthat::expect_type(.result, "integer") # will `fail()` if not an integer
  testthat::expect_equal(.result, 5L)        # will `fail()` if not equal to 5
  pass() # returns default message
})(list(
  .result = 5L
))

grade_this({
  testthat::expect_true(is.function(.result))
  testthat::expect_equal(.result(1), 3)
  pass()
})(list(
  .result = function(x) {x + 2}
))

# Remember, only `grade_this(expr)` should be used.
# The followup `list()` and values will be called by 
# `gradethis_exercise_checker()`
# To learn more about using `grade_this()` with learnr, see:
\dontrun{gradethis_demo()}
}
\seealso{
\code{\link[=grade_this_code]{grade_this_code()}}, \code{\link[=eval_gradethis]{eval_gradethis()}}
}
