% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test_result.R
\name{test_result}
\alias{test_result}
\title{Test the result of exercise code.}
\usage{
test_result(..., correct = NULL, incorrect = NULL,
  grader_args = list(), learnr_args = list(),
  glue_correct = getOption("gradethis_glue_correct_test"),
  glue_incorrect = getOption("gradethis_glue_incorrect_test"))
}
\arguments{
<<<<<<< HEAD
\item{...}{\code{\link{pass_if}} or \code{\link{fail_if}} \code{\link{condition}}s to check}

\item{correct}{A character string to display if the student answer matches a known correct answer.}

\item{incorrect}{A character string to display if the student answer matches a known incorrect answer.}
=======
\item{...}{ignored}

\item{correct}{A character string to display if all tests pass. This
character string will be run through \code{[glue::glue_data]} with:
\itemize{
\item \code{num_correct}: Number of correct tests. (Equals \code{num_total})
\item \code{num_total}: Number of tests
\item \code{errors}: Vector of errors found. (\code{NULL})
}}

\item{incorrect}{A character string to display if at least one test fails.
This character string will be run through \code{][glue::glue_data]} with:
\itemize{
\item \code{num_correct}: Number of correct tests
\item \code{num_total}: Number of tests
\item \code{errors}: Vector of errors found
}}
>>>>>>> Use roxygen markdown for comments, using roxygen2md::roxygen2md()

\item{grader_args}{A list of parameters passed to \code{grader} functions
(provided by \code{\link[=grade_learnr]{grade_learnr()}}). This contains:
\itemize{
\item \code{user_quo}: Quoted R code submitted by the user. For example
\code{[rlang::quo](1)}
\item \code{solution_quo}: (Optional) Quoted solution R code provided by the
\code{*-solution} chunk for an exercise.
}}

<<<<<<< HEAD
\item{learnr_args}{A list of all parameters passed to \code{\link{grade_learnr}} by \code{learnr}.
See \url{https://rstudio.github.io/learnr/exercises.html#exercise_checking} for more details.}

\item{glue_correct}{A glue string that returns the final correct message displayed.
Defaults to \code{getOption("gradethis_glue_correct_test")}, e.g.,
2/2 correct! Absolutely fabulous!.}

\item{glue_incorrect}{A glue string that returns the final correct message displayed.
Defaults to \code{getOption("gradethis_glue_correct_test")}, e.g.,
1/2 correct! Try it again; next time's the charm!.}
}
\value{
<<<<<<< HEAD
a \code{\link{graded}} object whether or not all test cases passed.
  If \code{\link{pass_if}} case is \code{TRUE} it is considered as passed.
  If \code{\link{fail_if}} case is \code{FALSE} it is also considered as passed.
  The message, by default, will report the number of passed conditions
  over the total number of conditions
=======
a \code{grader_graded} structure from \code{\link[=graded]{graded()}} containing
a formatted \code{correct} or \code{incorrect} message.
>>>>>>> Use roxygen markdown for comments, using roxygen2md::roxygen2md()
}
\description{
\code{test_result()} executes tests against the final result of the user code,
this is usually a function definition.
This is similar to the instructor providing passing and failing unit tests of student
written functions.
If a test throws an error, the test fails and the submitted answer will be marked incorrect
(i.e., a \code{\link{graded}} object with \code{correct = FALSE}).
=======
\item{learnr_args}{A list of all parameters passed to \code{\link[=grade_learnr]{grade_learnr()}} by
\code{learnr}. See
\url{https://rstudio.github.io/learnr/exercises.html#exercise_checking} for
more details.}
}
\value{
a \code{grader_graded} structure from \code{\link[=graded]{graded()}} containing a formatted
\code{correct} or \code{incorrect} message.
}
\description{
Executes tests against the final result of the user code. If
a test throws an error, the test fails and the submitted answer will be
marked incorrect.
>>>>>>> Convert remaining documentation entries to roxygen markdown; Reflow docs; Minor fixes.
}
\examples{
\dontrun{grading_demo()}

example_function <- function(x){
  return(x + 1)
}
test_result(
  pass_if(~ .result(3) == 4),
  pass_if(~ .result(10) == 11),
  grader_args = list(),
  learnr_args = list(last_value = example_function, envir_prep = new.env())
)

test_result(
  pass_if(~ .result(3) == 4),
  fail_if(~ .result(10) == 11),
  grader_args = list(),
  learnr_args = list(last_value = example_function, envir_prep = new.env())
)
}
\seealso{
\code{\link{check_code}}, \code{\link{check_result}}, and \code{\link{test_result}}
}
