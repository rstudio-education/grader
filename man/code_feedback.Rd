% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grade_this_code.R
\name{code_feedback}
\alias{code_feedback}
\alias{maybe_code_feedback}
\title{Code Feedback}
\usage{
code_feedback(
  user_code = get0(".user_code", parent.frame()),
  solution_code = get0(".solution_code", parent.frame()),
  env = get0(".envir_prep", parent.frame(), ifnotfound = parent.frame()),
  ...,
  allow_partial_matching = getOption("gradethis.code.partial_matching", TRUE)
)

maybe_code_feedback(
  user_code = get0(".user_code", parent.frame()),
  solution_code = get0(".solution_code", parent.frame()),
  env = get0(".envir_prep", parent.frame(), ifnotfound = parent.frame()),
  ...,
  allow_partial_matching = getOption("gradethis.code.partial_matching", TRUE),
  default = "",
  space_before = TRUE,
  space_after = FALSE
)
}
\arguments{
\item{user_code}{String containing user code. Defaults to retrieving \code{.user_code} from the calling environment. (Required)}

\item{solution_code}{String containing solution code. Defaults to retrieving \code{.solution_code} from the calling environment. (Required)}

\item{env}{Environment used to standardise formals of the user and solution code. Defaults to retrieving \code{.envir_prep} from the calling environment. If not found, the \code{\link[=parent.frame]{parent.frame()}} will be used}

\item{...}{Ignored}

\item{allow_partial_matching}{A logical if \code{FALSE} don't allow partial matching}

\item{space_before, space_after}{Logical value to determine if a space should be included before (\link{TRUE}) or after (\link{FALSE})}
}
\value{
If no discrepencies are found, a \code{NULL} value is returned. If a code difference is found, a character value describing the difference.
}
\description{
Generate a message describing the first instance of a code mismatch. This function is built to be used within \code{\link[=grade_this]{grade_this()}} without using arguments.
Manual calling of \code{code_feedback()} is also encouraged!
}
\section{Functions}{
\itemize{
\item \code{code_feedback}: Determine code feedback

\item \code{maybe_code_feedback}: Return \code{code_feedback()} result when possible. Useful when setting default \code{\link[=fail]{fail()}} glue messages. For example, if there is no solution, no code feedback will be given.
}}

\section{Code differences}{


There are many different ways that code can be different, yet still the same. Here is how we detect code differences:
\enumerate{
\item If the single values are different. Ex: \code{log(2)} vs \code{log(3)}
\item If the function call is different. Ex: \code{log(2)} vs \code{sqrt(2)}
\item Validate the user code can be standardised via \code{\link[rlang:call_standardise]{rlang::call_standardise()}}. The \code{env} parameter is important for this step as \pkg{gradethis} does not readily know about user defined functions. Ex: \code{read.csv("file.csv")} turns into \code{read.csv(file = "file.csv")}
\item If multiple formals are matched. Ex: \code{read.csv(f = "file.csv")} has \code{f} match to \code{file} and \code{fill}.
\item Verify that every named argument in the solution appears in the user code. Ex: If the solution is \code{read.csv("file.csv", header = TRUE)}, \code{header} must exist.
\item Verify that the user did not supply extra named arguments to \code{...}. Ex: \code{mean(x = 1:10, na.rm = TRUE)} vs \code{mean(x = 1:10)}
\item Verify that every named argument in the solution matches the value of the corresponding user argument. Ex: \code{read.csv("file.csv", header = TRUE)} vs \code{read.csv("file.csv", header = FALSE)}
\item Verify that the remaining aruguments of the user and solution code match in order and value. Ex: \code{mean(1:10, 0.1)} vs \code{mean(1:10, 0.2)}
}
}

\examples{
# Values are same
code_feedback("log(2)", "log(2)") # NULL # no differences found

# Functions are different
code_feedback("log(2)", "sqrt(2)")

# Standardise user names
code_feedback("read.csv('file.csv')", "read.csv(file = 'file.csv')") # NULL

# No partial matching
code_feedback("read.csv(f = 'file.csv')", "read.csv(file = 'file.csv')")

# All named arguments are provided (even if they match default value)
code_feedback("read.csv('file.csv')", "read.csv('file.csv', header = TRUE)")

# All named argument values match
code_feedback("read.csv('file.csv', header = FALSE)", "read.csv('file.csv', header = TRUE)")

# No extra arguments are provided
code_feedback("mean(1:10)", "mean(1:10, na.rm = TRUE)")

# Unstandardised arguments match in order and value
code_feedback("mean(1:10, 0.1)", "mean(1:10, 0.2)")
}
